import { useState } from 'react'
import { v4 as idGenerator } from 'uuid';


function App() {

// HOOK USE STATE
//recibe el Value y la funci칩n para cambiarlo. El useState es de react
//useState recibe al principio un string vac칤o ya que no existe texto al principio('')
//useState= hook de react 

//variable que representa al estado [text] y que va a ser modificado (pisado)
//funcion que modifica el estado que est치 en la posicion 0 [setText]. Set se usa ya que react usa clases de js. 
// Esto es una funcion callback, por si no est치s seguro del estado =>setText((currentState)=>[currentState, functionState])

//HOOK USE EFFECT
//se utiliza para cambiar estados asincronos. 

//const [a, setA] = useState('')

//useEffect(()=>{},[])

//useEffect(()={setx[x+a],[a]})=> cuando la a sea moficidada en otro set, comprueba el set previo como un callback

//si solo pones la funcion y no hay array, siempre se va a ejecutar. Si el segundo argumento 
//eL segundo argumento es para indicarle que la funci칩n definida tiene que modificarse si se modifica el estado del dicho argumento. 
//Es decir, si se cambia [x], se ejecuta la funci칩n del primer argumento.
//se va a ejecutar siempre que haya un render. Si actualizas 7 estados diferentes se actualizar치 este estado 7 veces
//por lo tanto si pones un array vac칤o solo se ejectur치 una vez []. El useEffect no se renderiza.
//Cuando el useEffect tiene un return es para controlar las funciones que no est치n bajo el control de use Effect. Es como si cauterizaras los posibles efectos de funciones que no pertenecen a react haciendo un return





const [text, setText] = useState('')

//useState recibe un array vac칤o que ser치 el estado de la lista cuando est치 vac칤a.
const [todoList, setTodo] = useState([])



// const handleClick = unit => setValue(value + unit)
const handleChange = event => setText(event.target.value)

const removeInputText = () =>{
  setText('')
}

const addTodo = () => {
  const newTodoList = todoList.concat({id:idGenerator() ,text}) //esto es igual a [...todoList, text]
  setTodo(newTodoList)
  removeInputText()
}

const handleRemove = valueToBeRemoved => setRemove(valueToBeRemoved)

const setRemove = (value) => {
   const newRemovedList = todoList.filter(item => item.id !== value)
   console.log(newRemovedList)
   setTodo(newRemovedList)
}

//console.log(text)
//console.log('todo list ', todoList)
  return (
    <section id="app">
      <div><header><h1 id="tittle">Todo List 游놓九껊잺</h1></header></div>
      <div id="container" className="container">
    <input id="inputTodo" onChange={handleChange} value={text}/>
    <div></div>
    <button id="button-regular" onClick={addTodo}>Add 九껊잺</button>
    <button id="button-regular" onClick={removeInputText}>Clean 游딈</button>
      </div>
      <div>
        <ul>
          <div>
            {
            todoList.map((todo, index)=>
            
            <div id="todoContainer"><li id="todo" key={index}>
              <p>{todo.text}</p>
              <button id="doneButton" onClick={()=>handleRemove(todo.id)}>Done! 游녨</button>
              </li></div>)
            }
           
          
          </div>
        </ul>
      </div>

    </section>
  )
}


export default App